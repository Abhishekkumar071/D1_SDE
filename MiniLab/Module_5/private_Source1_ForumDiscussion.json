{
  "source": "Private discussion-style data from forums (e.g., StackOverflow, Reddit, Discord)",
  "module": "Module 5: Mock Peer Reviews & Feedback",
  "file_type": "private_Source1_ForumDiscussion",
  "segments": {
    "introduction": {
      "level_1": [
        "I posted my first code and someone pointed out an error I didn’t even notice.",
        "Feedback in forums helped me fix my logic mistakes.",
        "Peer reviews made me realize naming variables clearly matters.",
        "One person told me: 'Clean code is like clean handwriting — easy to follow.'",
        "It was scary at first, but friendly feedback helped me improve fast."
      ],
      "level_2": [
        "A friend on Discord reviewed my function and suggested using a loop instead of repeating code.",
        "People suggested splitting my large function into smaller ones.",
        "I learned how to give suggestions politely, like saying 'You could try this…'",
        "In review channels, everyone uses emojis to show if feedback is accepted or needs discussion.",
        "Being open to feedback helped me grow faster."
      ],
      "level_3": [
        "In my open-source PR, a reviewer gave inline suggestions on GitHub.",
        "They pointed out edge cases I hadn't considered.",
        "My reviewer asked me to add unit tests — it really improved my code.",
        "I was advised to remove unused imports to keep things clean.",
        "Someone even rewrote a small part of my code to show better structure."
      ],
      "level_4": [
        "Senior devs in the group always say: give context, not commands.",
        "I was told to focus on the intent of code, not just style.",
        "A mentor advised me to leave summary feedback at the end of every review.",
        "We had a full discussion on whether a certain pattern was scalable.",
        "Feedback evolved into a design discussion — that was the real learning."
      ]
    },
    "realWorldUseCases": {
      "level_1": [
        "I reviewed a friend’s HTML code for a college project.",
        "My classmate helped me fix a bug I couldn’t find.",
        "We helped each other test our small Python scripts."
      ],
      "level_2": [
        "We started a feedback channel in our Discord group for code reviews.",
        "In a coding contest group, people shared suggestions after every round.",
        "A teammate told me my variable names were too confusing — I fixed them."
      ],
      "level_3": [
        "In a community project, we did weekly peer reviews.",
        "One member taught me how to write cleaner logic using if-else blocks.",
        "We followed a checklist to review each other's GitHub PRs."
      ],
      "level_4": [
        "Senior contributors helped review full modules in open source.",
        "We debated on the review thread whether to use REST or GraphQL.",
        "One person shared a PDF review document with design suggestions."
      ]
    },
    "industryApplications": {
      "level_1": [
        "Peer reviews are used in college group assignments.",
        "Internships often have informal review sessions."
      ],
      "level_2": [
        "Junior devs in startups review each other's frontend code.",
        "Many teams use Slack threads to share quick feedback."
      ],
      "level_3": [
        "Companies like Microsoft use structured review forms during team meetings.",
        "Code reviews are part of Agile sprint cycles in most companies."
      ],
      "level_4": [
        "FAANG companies use pull request templates and automated checks for peer reviews.",
        "System design reviews are part of promotion decisions in big tech firms."
      ]
    },
    "thinkingPattern": {
      "level_1": [
        "Try to understand what the writer is trying to solve.",
        "Don’t rush — read the full code first."
      ],
      "level_2": [
        "Always check if you understood the logic before commenting.",
        "Use kind language like: 'Have you considered this approach?'"
      ],
      "level_3": [
        "Give specific examples while suggesting changes.",
        "Focus on how the code will behave in edge cases."
      ],
      "level_4": [
        "Think long-term: Will this solution work after scaling?",
        "Use checklists or rubrics to standardize your reviews."
      ]
    },
    "problemTypes": {
      "level_1": [
        "Missed comments and poor indentation.",
        "Too many print statements for debugging."
      ],
      "level_2": [
        "Repeated logic that could be turned into a function.",
        "Variables that are not properly named or explained."
      ],
      "level_3": [
        "Hardcoded values that reduce code flexibility.",
        "Loops with performance issues in large input."
      ],
      "level_4": [
        "Missing error handling in backend services.",
        "Functions doing too many tasks instead of being modular."
      ]
    },
    "assessmentsAndQuizzes": {
      "level_1": [
        "What is peer review in simple words?",
        "Why is feedback useful while coding?"
      ],
      "level_2": [
        "How would you give feedback on a slow function?",
        "True/False: Feedback is always about fixing mistakes."
      ],
      "level_3": [
        "What should you do if someone’s code is hard to understand?",
        "List two polite ways to suggest improvement."
      ],
      "level_4": [
        "What are the risks of skipping peer review in a big system?",
        "Describe a scenario where peer review improved performance."
      ]
    },
    "miniProjects": {
      "level_1": [
        "Take a friend's small Python code and write 2 lines of feedback."
      ],
      "level_2": [
        "Share your project link in a coding group and collect 3 comments."
      ],
      "level_3": [
        "Do a review exchange with a peer for a real GitHub project."
      ],
      "level_4": [
        "Create a feedback log for a team project and present findings."
      ]
    },
    "suggestionsAndMistakes": {
      "level_1": [
        "Don’t just say 'wrong' — explain your point.",
        "Always say something good before pointing out an issue."
      ],
      "level_2": [
        "Avoid using harsh words like 'bad', use 'can be improved'.",
        "Ask questions instead of giving orders."
      ],
      "level_3": [
        "Make sure your suggestions are helpful, not confusing.",
        "Don’t dominate the review — listen too."
      ],
      "level_4": [
        "Focus reviews on goals, not just code style.",
        "Promote learning while reviewing — share resources if needed."
      ]
    }
  }
}
