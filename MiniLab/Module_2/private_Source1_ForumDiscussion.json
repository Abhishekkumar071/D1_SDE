{
  "source": "Curated from Stack Overflow, GitHub Discussions, and Reddit threads (2019-2023)",
  "module": "Module 2: GitHub & Open Source Etiquette",
  "file_type": "private_Source1_ForumDiscussion",
  "segments": {
    "introduction": {
      "level_1": [
        "Q: How do I undo a bad commit? A: `git revert <hash>` for public history, `git reset --hard HEAD~1` for local (but dangerous!).",
        "Comment: My first PR had 20+ comments because I didn't read CONTRIBUTING.md first!"
      ],
      "level_2": [
        "Q: Why do maintainers reject stylistic changes? A: They create noise - focus on substantive fixes first.",
        "Tip: Use `git blame` to understand why code exists before changing it."
      ],
      "level_3": [
        "Q: How to handle toxic maintainers? A: Document interactions, escalate to project admins if needed.",
        "Comment: We require DCO (Developer Certificate of Origin) signatures to avoid license lawsuits."
      ],
      "level_4": [
        "Q: Scaling GitHub for 500+ devs? A: Use CODEOWNERS, branch protections, and mandatory PR templates.",
        "Comment: At Netflix, we automate 90% of PR checks using GitHub Actions + Danger.js."
      ]
    },
    "realWorldUseCases": {
      "level_1": [
        "Q: Real use for forks? A: I forked Bootstrap, fixed a CSS bug, and my PR got merged!"
      ],
      "level_2": [
        "Comment: Used GitHub Issues to track a memory leak in React - maintainers helped me fix it."
      ],
      "level_3": [
        "Q: How to manage 100+ PRs/month? A: We use 'Squash & Merge' + automated label bots (e.g., 'needs-review')."
      ],
      "level_4": [
        "Comment: Microsoft manages VS Code contributions via personal forks + centralized CI (20K+ PRs handled)."
      ]
    },
    "industryApplications": {
      "level_1": [
        "Q: Do internships care about GitHub? A: Yes! My weather app repo got me an interview at Google."
      ],
      "level_2": [
        "Comment: Startup I joined used GitHub Projects instead of Jira - saved $10k/year."
      ],
      "level_3": [
        "Q: Enterprise Git workflows? A: We use Git LFS for design files and pre-commit hooks for security scans."
      ],
      "level_4": [
        "Comment: Twitter's monorepo uses custom tooling to split GitHub notifications by team (500+ engineers)."
      ]
    },
    "thinkingPattern": {
      "level_1": [
        "Tip: Always `git pull --rebase` to avoid merge commits in shared branches."
      ],
      "level_2": [
        "Q: How to structure commits? A: Atomic commits - one logical change per commit."
      ],
      "level_3": [
        "Comment: I diagram complex merges with `git log --graph` before attempting rebases."
      ],
      "level_4": [
        "Tip: For contentious PRs, schedule a live sync instead of endless comments."
      ]
    },
    "problemTypes": {
      "level_1": [
        "Q: How to fix 'detached HEAD' state? A: `git checkout <branch>` or create new branch with `git switch -c new-branch`."
      ],
      "level_2": [
        "Comment: Spent 4 hours debugging a merge conflict - turned out I needed `git checkout --ours/--theirs`."
      ],
      "level_3": [
        "Q: How to split a giant PR? A: Use `git rebase -i` to edit history, then force-push to feature branch."
      ],
      "level_4": [
        "Comment: Migrated 50 repos to a monorepo using `git filter-repo` - took 3 months but worth it."
      ]
    },
    "assessmentsAndQuizzes": {
      "level_1": [
        "Q: What does `git stash` do? A: Temporarily shelves changes so you can switch branches."
      ],
      "level_2": [
        "Quiz: How to list all remote branches? A: `git branch -r` or `git ls-remote --heads`."
      ],
      "level_3": [
        "Q: How to find which commit introduced a bug? A: `git bisect` + automated test script."
      ],
      "level_4": [
        "Quiz: Design a hook to block commits without JIRA ticket IDs in messages."
      ]
    },
    "miniProjects": {
      "level_1": [
        "Project Idea: Create a repo with 3 branches showing merge vs. rebase differences."
      ],
      "level_2": [
        "Comment: Built a GitHub Action that comments 'Thanks for your PR!' on first-time contributors."
      ],
      "level_3": [
        "Q: How to automate changelogs? A: Use conventional commits + `standard-version` npm package."
      ],
      "level_4": [
        "Project Idea: Create a bot that auto-labels PRs based on modified files (e.g., 'frontend', 'docs')."
      ]
    },
    "suggestionsAndMistakes": {
      "level_1": [
        "Mistake: Pushed node_modules to GitHub. Now I use `.gitignore` templates."
      ],
      "level_2": [
        "Tip: Always `git diff` before committing to avoid accidental changes."
      ],
      "level_3": [
        "Mistake: Force-pushed to main branch - now we use branch protection rules."
      ],
      "level_4": [
        "Tip: For large teams, set up `pre-receive` hooks to block banned file patterns (e.g., AWS keys)."
      ]
    }
  }
}
