{
  "source": "Blogs from GitHub Docs, OpenSource.guide, and developer advocacy articles",
  "module": "Module 2: GitHub & Open Source Etiquette",
  "file_type": "public_Source2_Blog",
  "segments": {
    "introduction": {
      "level_1": [
        "GitHub is a platform for hosting code and collaborating on projects.",
        "Open source means code is publicly accessible for use/modification.",
        "Basic terms: Repository (repo), Commit, Pull Request (PR)."
      ],
      "level_2": [
        "GitHub enables version control (tracking code changes over time).",
        "Open source projects rely on community contributions (bugs, features, docs).",
        "Key workflows: Forking, Branching, and Merging."
      ],
      "level_3": [
        "Advanced GitHub features: Actions (CI/CD), Projects (kanban boards), Pages (hosting).",
        "Maintaining OSS requires handling issues, PR reviews, and governance.",
        "Licenses (MIT, GPL) define how others can use your code."
      ],
      "level_4": [
        "Enterprise GitHub: SAML SSO, audit logs, and policy enforcement.",
        "Leading OSS projects often have corporate backing (e.g., React by Meta).",
        "Ethics in OSS: Sustainability, credit, and avoiding burnout."
      ]
    },
    "realWorldUseCases": {
      "level_1": [
        "Using GitHub to host a personal portfolio website."
      ],
      "level_2": [
        "Contributing documentation fixes to a popular library (e.g., React)."
      ],
      "level_3": [
        "Automating tests with GitHub Actions for a Python package."
      ],
      "level_4": [
        "Managing a large-scale OSS project with 100+ contributors (e.g., VS Code)."
      ]
    },
    "industryApplications": {
      "level_1": [
        "Interns: Use GitHub to showcase class projects."
      ],
      "level_2": [
        "Startups: Host private repos for MVP development."
      ],
      "level_3": [
        "Tech companies: InnerSource (internal open-source collaboration)."
      ],
      "level_4": [
        "FAANG: Maintain public OSS projects (e.g., Google’s TensorFlow)."
      ]
    },
    "thinkingPattern": {
      "level_1": [
        "Before coding: ‘Does this belong in a new branch or main?’"
      ],
      "level_2": [
        "When contributing: ‘Is my PR description clear and reproducible?’"
      ],
      "level_3": [
        "Reviewing PRs: ‘Does this follow the project’s style guide?’"
      ],
      "level_4": [
        "Governance: ‘How do we handle controversial contributions?’"
      ]
    },
    "problemTypes": {
      "level_1": [
        "Resolving a merge conflict in a personal repo."
      ],
      "level_2": [
        "Writing a clear bug report for an OSS project."
      ],
      "level_3": [
        "Rebasing a feature branch to avoid merge commits."
      ],
      "level_4": [
        "Designing a contributor onboarding workflow."
      ]
    },
    "assessmentsAndQuizzes": {
      "level_1": [
        "What command creates a new Git branch?"
      ],
      "level_2": [
        "When should you squash commits?"
      ],
      "level_3": [
        "How would you automate dependency updates?"
      ],
      "level_4": [
        "Design a CODEOWNERS file for a monorepo."
      ]
    },
    "miniProjects": {
      "level_1": [
        "Create a repo and upload a ‘Hello World’ script."
      ],
      "level_2": [
        "Contribute a typo fix to a documentation repo."
      ],
      "level_3": [
        "Build a CI pipeline to test a JavaScript library."
      ],
      "level_4": [
        "Set up issue templates for a community project."
      ]
    },
    "suggestionsAndMistakes": {
      "level_1": [
        "Mistake: Pushing API keys to public repos (use `.gitignore`!)."
      ],
      "level_2": [
        "Tip: Always link PRs to issues for context."
      ],
      "level_3": [
        "Mistake: Force-pushing to shared branches."
      ],
      "level_4": [
        "Tip: Use DCO (Developer Certificate of Origin) for legal compliance."
      ]
    }
  }
}
